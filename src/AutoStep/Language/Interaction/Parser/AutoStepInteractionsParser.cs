//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\AutoStepInteractionsParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AutoStep.Language.Interaction.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
internal partial class AutoStepInteractionsParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		APP_DEFINITION=1, TRAIT_DEFINITION=2, COMPONENT_DEFINITION=3, TRAITS_KEYWORD=4, 
		NAME_KEYWORD=5, INHERITS_KEYWORD=6, COMPONENTS_KEYWORD=7, STEP_DEFINE=8, 
		LIST_SEPARATOR=9, DEF_SEPARATOR=10, NEEDS_DEFINING=11, METHOD_OPEN=12, 
		NAME_REF=13, PLUS=14, FUNC_PASS_MARKER=15, STRING=16, NEWLINE=17, TEXT_DOC_COMMENT=18, 
		TEXT_COMMENT=19, WS=20, ERR_CHAR=21, METHOD_STRING_START=22, CONSTANT=23, 
		PARAM_NAME=24, ARR_LEFT=25, ARR_RIGHT=26, PARAM_SEPARATOR=27, FLOAT=28, 
		INT=29, METHOD_CLOSE=30, METH_WS=31, STR_ANGLE_LEFT=32, METHOD_STR_ESCAPE_QUOTE=33, 
		METHOD_STRING_END=34, METHOD_STRING_ERRNL=35, STR_CONTENT=36, STR_NAME_REF=37, 
		STR_ANGLE_RIGHT=38, DEF_GIVEN=39, DEF_WHEN=40, DEF_THEN=41, DEF_ESCAPED_LCURLY=42, 
		DEF_ESCAPED_RCURLY=43, DEF_LCURLY=44, DEF_RCURLY=45, DEF_NEWLINE=46, DEF_WS=47, 
		DEF_COLON=48, DEF_COMPONENT_INSERT=49, DEF_WORD=50, SINGLE_METHOD_STR_ESCAPE_QUOTE=51, 
		SINGLE_METHOD_STRING_END=52;
	public const int
		RULE_file = 0, RULE_entityDefinition = 1, RULE_appDefinition = 2, RULE_appItem = 3, 
		RULE_traitDefinition = 4, RULE_traitDefinitionDeclaration = 5, RULE_traitRefList = 6, 
		RULE_traitItem = 7, RULE_methodDefinition = 8, RULE_methodDeclaration = 9, 
		RULE_methodDefArgs = 10, RULE_methodCallChain = 11, RULE_methodCall = 12, 
		RULE_methodCallArgs = 13, RULE_methodCallArg = 14, RULE_methodCallArrayRefString = 15, 
		RULE_methodStr = 16, RULE_methodStrPart = 17, RULE_componentDefinition = 18, 
		RULE_componentDefinitionDeclaration = 19, RULE_componentItem = 20, RULE_stepDefinitionBody = 21, 
		RULE_stepDefinition = 22, RULE_stepDeclaration = 23, RULE_stepDeclarationBody = 24, 
		RULE_stepDeclarationSection = 25, RULE_stepDeclarationArgument = 26, RULE_stepDeclarationArgumentName = 27, 
		RULE_stepDeclarationTypeHint = 28, RULE_stepDeclarationSectionContent = 29;
	public static readonly string[] ruleNames = {
		"file", "entityDefinition", "appDefinition", "appItem", "traitDefinition", 
		"traitDefinitionDeclaration", "traitRefList", "traitItem", "methodDefinition", 
		"methodDeclaration", "methodDefArgs", "methodCallChain", "methodCall", 
		"methodCallArgs", "methodCallArg", "methodCallArrayRefString", "methodStr", 
		"methodStrPart", "componentDefinition", "componentDefinitionDeclaration", 
		"componentItem", "stepDefinitionBody", "stepDefinition", "stepDeclaration", 
		"stepDeclarationBody", "stepDeclarationSection", "stepDeclarationArgument", 
		"stepDeclarationArgumentName", "stepDeclarationTypeHint", "stepDeclarationSectionContent"
	};

	private static readonly string[] _LiteralNames = {
		null, "'App:'", "'Trait:'", "'Component:'", "'traits:'", "'name:'", "'inherits:'", 
		"'components:'", "'Step:'", null, null, "'needs-defining'", "'('", null, 
		"'+'", "'->'", null, null, null, null, null, null, null, null, null, "'['", 
		"']'", null, null, null, "')'", null, "'<'", "'\\\"'", null, null, null, 
		null, "'>'", "'Given'", "'When'", "'Then'", "'\\{'", "'\\}'", "'{'", "'}'", 
		null, null, null, "'$component$'", null, "'\\''", "'''"
	};
	private static readonly string[] _SymbolicNames = {
		null, "APP_DEFINITION", "TRAIT_DEFINITION", "COMPONENT_DEFINITION", "TRAITS_KEYWORD", 
		"NAME_KEYWORD", "INHERITS_KEYWORD", "COMPONENTS_KEYWORD", "STEP_DEFINE", 
		"LIST_SEPARATOR", "DEF_SEPARATOR", "NEEDS_DEFINING", "METHOD_OPEN", "NAME_REF", 
		"PLUS", "FUNC_PASS_MARKER", "STRING", "NEWLINE", "TEXT_DOC_COMMENT", "TEXT_COMMENT", 
		"WS", "ERR_CHAR", "METHOD_STRING_START", "CONSTANT", "PARAM_NAME", "ARR_LEFT", 
		"ARR_RIGHT", "PARAM_SEPARATOR", "FLOAT", "INT", "METHOD_CLOSE", "METH_WS", 
		"STR_ANGLE_LEFT", "METHOD_STR_ESCAPE_QUOTE", "METHOD_STRING_END", "METHOD_STRING_ERRNL", 
		"STR_CONTENT", "STR_NAME_REF", "STR_ANGLE_RIGHT", "DEF_GIVEN", "DEF_WHEN", 
		"DEF_THEN", "DEF_ESCAPED_LCURLY", "DEF_ESCAPED_RCURLY", "DEF_LCURLY", 
		"DEF_RCURLY", "DEF_NEWLINE", "DEF_WS", "DEF_COLON", "DEF_COMPONENT_INSERT", 
		"DEF_WORD", "SINGLE_METHOD_STR_ESCAPE_QUOTE", "SINGLE_METHOD_STRING_END"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AutoStepInteractionsParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AutoStepInteractionsParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AutoStepInteractionsParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AutoStepInteractionsParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	internal partial class FileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(AutoStepInteractionsParser.Eof, 0); }
		public EntityDefinitionContext[] entityDefinition() {
			return GetRuleContexts<EntityDefinitionContext>();
		}
		public EntityDefinitionContext entityDefinition(int i) {
			return GetRuleContext<EntityDefinitionContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << APP_DEFINITION) | (1L << TRAIT_DEFINITION) | (1L << COMPONENT_DEFINITION))) != 0)) {
				{
				{
				State = 60; entityDefinition();
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 66; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class EntityDefinitionContext : ParserRuleContext {
		public TraitDefinitionContext traitDefinition() {
			return GetRuleContext<TraitDefinitionContext>(0);
		}
		public ComponentDefinitionContext componentDefinition() {
			return GetRuleContext<ComponentDefinitionContext>(0);
		}
		public AppDefinitionContext appDefinition() {
			return GetRuleContext<AppDefinitionContext>(0);
		}
		public EntityDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterEntityDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitEntityDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityDefinitionContext entityDefinition() {
		EntityDefinitionContext _localctx = new EntityDefinitionContext(Context, State);
		EnterRule(_localctx, 2, RULE_entityDefinition);
		try {
			State = 71;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRAIT_DEFINITION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 68; traitDefinition();
				}
				break;
			case COMPONENT_DEFINITION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 69; componentDefinition();
				}
				break;
			case APP_DEFINITION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 70; appDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class AppDefinitionContext : ParserRuleContext {
		public ITerminalNode APP_DEFINITION() { return GetToken(AutoStepInteractionsParser.APP_DEFINITION, 0); }
		public ITerminalNode NAME_REF() { return GetToken(AutoStepInteractionsParser.NAME_REF, 0); }
		public AppItemContext[] appItem() {
			return GetRuleContexts<AppItemContext>();
		}
		public AppItemContext appItem(int i) {
			return GetRuleContext<AppItemContext>(i);
		}
		public AppDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_appDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterAppDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitAppDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AppDefinitionContext appDefinition() {
		AppDefinitionContext _localctx = new AppDefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_appDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73; Match(APP_DEFINITION);
			State = 74; Match(NAME_REF);
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME_KEYWORD) | (1L << COMPONENTS_KEYWORD) | (1L << STEP_DEFINE) | (1L << NAME_REF))) != 0)) {
				{
				{
				State = 75; appItem();
				}
				}
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class AppItemContext : ParserRuleContext {
		public AppItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_appItem; } }
	 
		public AppItemContext() { }
		public virtual void CopyFrom(AppItemContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class AppTraitsContext : AppItemContext {
		public ITerminalNode COMPONENTS_KEYWORD() { return GetToken(AutoStepInteractionsParser.COMPONENTS_KEYWORD, 0); }
		public ITerminalNode[] NAME_REF() { return GetTokens(AutoStepInteractionsParser.NAME_REF); }
		public ITerminalNode NAME_REF(int i) {
			return GetToken(AutoStepInteractionsParser.NAME_REF, i);
		}
		public ITerminalNode[] LIST_SEPARATOR() { return GetTokens(AutoStepInteractionsParser.LIST_SEPARATOR); }
		public ITerminalNode LIST_SEPARATOR(int i) {
			return GetToken(AutoStepInteractionsParser.LIST_SEPARATOR, i);
		}
		public AppTraitsContext(AppItemContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterAppTraits(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitAppTraits(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppTraits(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class AppStepContext : AppItemContext {
		public StepDefinitionBodyContext stepDefinitionBody() {
			return GetRuleContext<StepDefinitionBodyContext>(0);
		}
		public AppStepContext(AppItemContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterAppStep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitAppStep(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppStep(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class AppMethodContext : AppItemContext {
		public MethodDefinitionContext methodDefinition() {
			return GetRuleContext<MethodDefinitionContext>(0);
		}
		public AppMethodContext(AppItemContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterAppMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitAppMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class AppNameContext : AppItemContext {
		public ITerminalNode NAME_KEYWORD() { return GetToken(AutoStepInteractionsParser.NAME_KEYWORD, 0); }
		public ITerminalNode STRING() { return GetToken(AutoStepInteractionsParser.STRING, 0); }
		public AppNameContext(AppItemContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterAppName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitAppName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AppItemContext appItem() {
		AppItemContext _localctx = new AppItemContext(Context, State);
		EnterRule(_localctx, 6, RULE_appItem);
		int _la;
		try {
			State = 94;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME_KEYWORD:
				_localctx = new AppNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 81; Match(NAME_KEYWORD);
				State = 82; Match(STRING);
				}
				break;
			case COMPONENTS_KEYWORD:
				_localctx = new AppTraitsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 83; Match(COMPONENTS_KEYWORD);
				State = 84; Match(NAME_REF);
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LIST_SEPARATOR) {
					{
					{
					State = 85; Match(LIST_SEPARATOR);
					State = 86; Match(NAME_REF);
					}
					}
					State = 91;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case NAME_REF:
				_localctx = new AppMethodContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 92; methodDefinition();
				}
				break;
			case STEP_DEFINE:
				_localctx = new AppStepContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 93; stepDefinitionBody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class TraitDefinitionContext : ParserRuleContext {
		public TraitDefinitionDeclarationContext traitDefinitionDeclaration() {
			return GetRuleContext<TraitDefinitionDeclarationContext>(0);
		}
		public TraitItemContext[] traitItem() {
			return GetRuleContexts<TraitItemContext>();
		}
		public TraitItemContext traitItem(int i) {
			return GetRuleContext<TraitItemContext>(i);
		}
		public TraitDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_traitDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterTraitDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitTraitDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTraitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TraitDefinitionContext traitDefinition() {
		TraitDefinitionContext _localctx = new TraitDefinitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_traitDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; traitDefinitionDeclaration();
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==STEP_DEFINE || _la==NAME_REF) {
				{
				{
				State = 97; traitItem();
				}
				}
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class TraitDefinitionDeclarationContext : ParserRuleContext {
		public ITerminalNode TRAIT_DEFINITION() { return GetToken(AutoStepInteractionsParser.TRAIT_DEFINITION, 0); }
		public TraitRefListContext traitRefList() {
			return GetRuleContext<TraitRefListContext>(0);
		}
		public TraitDefinitionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_traitDefinitionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterTraitDefinitionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitTraitDefinitionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTraitDefinitionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TraitDefinitionDeclarationContext traitDefinitionDeclaration() {
		TraitDefinitionDeclarationContext _localctx = new TraitDefinitionDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_traitDefinitionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; Match(TRAIT_DEFINITION);
			State = 104; traitRefList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class TraitRefListContext : ParserRuleContext {
		public ITerminalNode[] NAME_REF() { return GetTokens(AutoStepInteractionsParser.NAME_REF); }
		public ITerminalNode NAME_REF(int i) {
			return GetToken(AutoStepInteractionsParser.NAME_REF, i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(AutoStepInteractionsParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(AutoStepInteractionsParser.PLUS, i);
		}
		public TraitRefListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_traitRefList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterTraitRefList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitTraitRefList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTraitRefList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TraitRefListContext traitRefList() {
		TraitRefListContext _localctx = new TraitRefListContext(Context, State);
		EnterRule(_localctx, 12, RULE_traitRefList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; Match(NAME_REF);
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS) {
				{
				{
				State = 107; Match(PLUS);
				State = 108; Match(NAME_REF);
				}
				}
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class TraitItemContext : ParserRuleContext {
		public TraitItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_traitItem; } }
	 
		public TraitItemContext() { }
		public virtual void CopyFrom(TraitItemContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class TraitStepContext : TraitItemContext {
		public StepDefinitionBodyContext stepDefinitionBody() {
			return GetRuleContext<StepDefinitionBodyContext>(0);
		}
		public TraitStepContext(TraitItemContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterTraitStep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitTraitStep(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTraitStep(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class TraitMethodContext : TraitItemContext {
		public MethodDefinitionContext methodDefinition() {
			return GetRuleContext<MethodDefinitionContext>(0);
		}
		public TraitMethodContext(TraitItemContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterTraitMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitTraitMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTraitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TraitItemContext traitItem() {
		TraitItemContext _localctx = new TraitItemContext(Context, State);
		EnterRule(_localctx, 14, RULE_traitItem);
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME_REF:
				_localctx = new TraitMethodContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 114; methodDefinition();
				}
				break;
			case STEP_DEFINE:
				_localctx = new TraitStepContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 115; stepDefinitionBody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class MethodDefinitionContext : ParserRuleContext {
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public ITerminalNode DEF_SEPARATOR() { return GetToken(AutoStepInteractionsParser.DEF_SEPARATOR, 0); }
		public ITerminalNode NEEDS_DEFINING() { return GetToken(AutoStepInteractionsParser.NEEDS_DEFINING, 0); }
		public MethodCallChainContext methodCallChain() {
			return GetRuleContext<MethodCallChainContext>(0);
		}
		public MethodDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterMethodDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitMethodDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefinitionContext methodDefinition() {
		MethodDefinitionContext _localctx = new MethodDefinitionContext(Context, State);
		EnterRule(_localctx, 16, RULE_methodDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; methodDeclaration();
			State = 119; Match(DEF_SEPARATOR);
			State = 122;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEEDS_DEFINING:
				{
				State = 120; Match(NEEDS_DEFINING);
				}
				break;
			case NAME_REF:
				{
				State = 121; methodCallChain();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class MethodDeclarationContext : ParserRuleContext {
		public ITerminalNode NAME_REF() { return GetToken(AutoStepInteractionsParser.NAME_REF, 0); }
		public ITerminalNode METHOD_OPEN() { return GetToken(AutoStepInteractionsParser.METHOD_OPEN, 0); }
		public ITerminalNode METHOD_CLOSE() { return GetToken(AutoStepInteractionsParser.METHOD_CLOSE, 0); }
		public MethodDefArgsContext methodDefArgs() {
			return GetRuleContext<MethodDefArgsContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; Match(NAME_REF);
			State = 125; Match(METHOD_OPEN);
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARAM_NAME) {
				{
				State = 126; methodDefArgs();
				}
			}

			State = 129; Match(METHOD_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class MethodDefArgsContext : ParserRuleContext {
		public ITerminalNode[] PARAM_NAME() { return GetTokens(AutoStepInteractionsParser.PARAM_NAME); }
		public ITerminalNode PARAM_NAME(int i) {
			return GetToken(AutoStepInteractionsParser.PARAM_NAME, i);
		}
		public ITerminalNode[] PARAM_SEPARATOR() { return GetTokens(AutoStepInteractionsParser.PARAM_SEPARATOR); }
		public ITerminalNode PARAM_SEPARATOR(int i) {
			return GetToken(AutoStepInteractionsParser.PARAM_SEPARATOR, i);
		}
		public MethodDefArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDefArgs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterMethodDefArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitMethodDefArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDefArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefArgsContext methodDefArgs() {
		MethodDefArgsContext _localctx = new MethodDefArgsContext(Context, State);
		EnterRule(_localctx, 20, RULE_methodDefArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131; Match(PARAM_NAME);
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PARAM_SEPARATOR) {
				{
				{
				State = 132; Match(PARAM_SEPARATOR);
				State = 133; Match(PARAM_NAME);
				}
				}
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class MethodCallChainContext : ParserRuleContext {
		public MethodCallContext[] methodCall() {
			return GetRuleContexts<MethodCallContext>();
		}
		public MethodCallContext methodCall(int i) {
			return GetRuleContext<MethodCallContext>(i);
		}
		public ITerminalNode[] FUNC_PASS_MARKER() { return GetTokens(AutoStepInteractionsParser.FUNC_PASS_MARKER); }
		public ITerminalNode FUNC_PASS_MARKER(int i) {
			return GetToken(AutoStepInteractionsParser.FUNC_PASS_MARKER, i);
		}
		public MethodCallChainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCallChain; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterMethodCallChain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitMethodCallChain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCallChain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallChainContext methodCallChain() {
		MethodCallChainContext _localctx = new MethodCallChainContext(Context, State);
		EnterRule(_localctx, 22, RULE_methodCallChain);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; methodCall();
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FUNC_PASS_MARKER) {
				{
				{
				State = 140; Match(FUNC_PASS_MARKER);
				State = 141; methodCall();
				}
				}
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class MethodCallContext : ParserRuleContext {
		public ITerminalNode NAME_REF() { return GetToken(AutoStepInteractionsParser.NAME_REF, 0); }
		public ITerminalNode METHOD_OPEN() { return GetToken(AutoStepInteractionsParser.METHOD_OPEN, 0); }
		public ITerminalNode METHOD_CLOSE() { return GetToken(AutoStepInteractionsParser.METHOD_CLOSE, 0); }
		public MethodCallArgsContext methodCallArgs() {
			return GetRuleContext<MethodCallArgsContext>(0);
		}
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 24, RULE_methodCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; Match(NAME_REF);
			State = 148; Match(METHOD_OPEN);
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << METHOD_STRING_START) | (1L << CONSTANT) | (1L << PARAM_NAME) | (1L << FLOAT) | (1L << INT))) != 0)) {
				{
				State = 149; methodCallArgs();
				}
			}

			State = 152; Match(METHOD_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class MethodCallArgsContext : ParserRuleContext {
		public MethodCallArgContext[] methodCallArg() {
			return GetRuleContexts<MethodCallArgContext>();
		}
		public MethodCallArgContext methodCallArg(int i) {
			return GetRuleContext<MethodCallArgContext>(i);
		}
		public ITerminalNode[] PARAM_SEPARATOR() { return GetTokens(AutoStepInteractionsParser.PARAM_SEPARATOR); }
		public ITerminalNode PARAM_SEPARATOR(int i) {
			return GetToken(AutoStepInteractionsParser.PARAM_SEPARATOR, i);
		}
		public MethodCallArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCallArgs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterMethodCallArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitMethodCallArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCallArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallArgsContext methodCallArgs() {
		MethodCallArgsContext _localctx = new MethodCallArgsContext(Context, State);
		EnterRule(_localctx, 26, RULE_methodCallArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154; methodCallArg();
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PARAM_SEPARATOR) {
				{
				{
				State = 155; Match(PARAM_SEPARATOR);
				State = 156; methodCallArg();
				}
				}
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class MethodCallArgContext : ParserRuleContext {
		public MethodCallArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCallArg; } }
	 
		public MethodCallArgContext() { }
		public virtual void CopyFrom(MethodCallArgContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class StringArgContext : MethodCallArgContext {
		public ITerminalNode METHOD_STRING_START() { return GetToken(AutoStepInteractionsParser.METHOD_STRING_START, 0); }
		public MethodStrContext methodStr() {
			return GetRuleContext<MethodStrContext>(0);
		}
		public ITerminalNode METHOD_STRING_END() { return GetToken(AutoStepInteractionsParser.METHOD_STRING_END, 0); }
		public StringArgContext(MethodCallArgContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterStringArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitStringArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringArg(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class VariableArrRefContext : MethodCallArgContext {
		public ITerminalNode[] PARAM_NAME() { return GetTokens(AutoStepInteractionsParser.PARAM_NAME); }
		public ITerminalNode PARAM_NAME(int i) {
			return GetToken(AutoStepInteractionsParser.PARAM_NAME, i);
		}
		public ITerminalNode ARR_LEFT() { return GetToken(AutoStepInteractionsParser.ARR_LEFT, 0); }
		public ITerminalNode ARR_RIGHT() { return GetToken(AutoStepInteractionsParser.ARR_RIGHT, 0); }
		public VariableArrRefContext(MethodCallArgContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterVariableArrRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitVariableArrRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableArrRef(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class FloatArgContext : MethodCallArgContext {
		public ITerminalNode FLOAT() { return GetToken(AutoStepInteractionsParser.FLOAT, 0); }
		public FloatArgContext(MethodCallArgContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterFloatArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitFloatArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatArg(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class VariableArrStrRefContext : MethodCallArgContext {
		public ITerminalNode PARAM_NAME() { return GetToken(AutoStepInteractionsParser.PARAM_NAME, 0); }
		public ITerminalNode ARR_LEFT() { return GetToken(AutoStepInteractionsParser.ARR_LEFT, 0); }
		public MethodCallArrayRefStringContext methodCallArrayRefString() {
			return GetRuleContext<MethodCallArrayRefStringContext>(0);
		}
		public ITerminalNode ARR_RIGHT() { return GetToken(AutoStepInteractionsParser.ARR_RIGHT, 0); }
		public VariableArrStrRefContext(MethodCallArgContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterVariableArrStrRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitVariableArrStrRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableArrStrRef(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class IntArgContext : MethodCallArgContext {
		public ITerminalNode INT() { return GetToken(AutoStepInteractionsParser.INT, 0); }
		public IntArgContext(MethodCallArgContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterIntArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitIntArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntArg(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class ConstantRefContext : MethodCallArgContext {
		public ITerminalNode CONSTANT() { return GetToken(AutoStepInteractionsParser.CONSTANT, 0); }
		public ConstantRefContext(MethodCallArgContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterConstantRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitConstantRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantRef(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class VariableRefContext : MethodCallArgContext {
		public ITerminalNode PARAM_NAME() { return GetToken(AutoStepInteractionsParser.PARAM_NAME, 0); }
		public VariableRefContext(MethodCallArgContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterVariableRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitVariableRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallArgContext methodCallArg() {
		MethodCallArgContext _localctx = new MethodCallArgContext(Context, State);
		EnterRule(_localctx, 28, RULE_methodCallArg);
		try {
			State = 179;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				_localctx = new StringArgContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 162; Match(METHOD_STRING_START);
				State = 163; methodStr();
				State = 164; Match(METHOD_STRING_END);
				}
				break;
			case 2:
				_localctx = new VariableRefContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 166; Match(PARAM_NAME);
				}
				break;
			case 3:
				_localctx = new VariableArrRefContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 167; Match(PARAM_NAME);
				State = 168; Match(ARR_LEFT);
				State = 169; Match(PARAM_NAME);
				State = 170; Match(ARR_RIGHT);
				}
				break;
			case 4:
				_localctx = new VariableArrStrRefContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 171; Match(PARAM_NAME);
				State = 172; Match(ARR_LEFT);
				State = 173; methodCallArrayRefString();
				State = 174; Match(ARR_RIGHT);
				}
				break;
			case 5:
				_localctx = new ConstantRefContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 176; Match(CONSTANT);
				}
				break;
			case 6:
				_localctx = new IntArgContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 177; Match(INT);
				}
				break;
			case 7:
				_localctx = new FloatArgContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 178; Match(FLOAT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class MethodCallArrayRefStringContext : ParserRuleContext {
		public ITerminalNode METHOD_STRING_START() { return GetToken(AutoStepInteractionsParser.METHOD_STRING_START, 0); }
		public MethodStrContext methodStr() {
			return GetRuleContext<MethodStrContext>(0);
		}
		public ITerminalNode METHOD_STRING_END() { return GetToken(AutoStepInteractionsParser.METHOD_STRING_END, 0); }
		public MethodCallArrayRefStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCallArrayRefString; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterMethodCallArrayRefString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitMethodCallArrayRefString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCallArrayRefString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallArrayRefStringContext methodCallArrayRefString() {
		MethodCallArrayRefStringContext _localctx = new MethodCallArrayRefStringContext(Context, State);
		EnterRule(_localctx, 30, RULE_methodCallArrayRefString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; Match(METHOD_STRING_START);
			State = 182; methodStr();
			State = 183; Match(METHOD_STRING_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class MethodStrContext : ParserRuleContext {
		public MethodStrPartContext[] methodStrPart() {
			return GetRuleContexts<MethodStrPartContext>();
		}
		public MethodStrPartContext methodStrPart(int i) {
			return GetRuleContext<MethodStrPartContext>(i);
		}
		public MethodStrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodStr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterMethodStr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitMethodStr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodStr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodStrContext methodStr() {
		MethodStrContext _localctx = new MethodStrContext(Context, State);
		EnterRule(_localctx, 32, RULE_methodStr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 185; methodStrPart();
				}
				}
				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STR_ANGLE_LEFT) | (1L << METHOD_STR_ESCAPE_QUOTE) | (1L << STR_CONTENT))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class MethodStrPartContext : ParserRuleContext {
		public MethodStrPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodStrPart; } }
	 
		public MethodStrPartContext() { }
		public virtual void CopyFrom(MethodStrPartContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class MethodStrEscapeContext : MethodStrPartContext {
		public ITerminalNode METHOD_STR_ESCAPE_QUOTE() { return GetToken(AutoStepInteractionsParser.METHOD_STR_ESCAPE_QUOTE, 0); }
		public MethodStrEscapeContext(MethodStrPartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterMethodStrEscape(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitMethodStrEscape(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodStrEscape(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class MethodStrContentContext : MethodStrPartContext {
		public ITerminalNode STR_CONTENT() { return GetToken(AutoStepInteractionsParser.STR_CONTENT, 0); }
		public MethodStrContentContext(MethodStrPartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterMethodStrContent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitMethodStrContent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodStrContent(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class MethodStrVariableContext : MethodStrPartContext {
		public ITerminalNode STR_ANGLE_LEFT() { return GetToken(AutoStepInteractionsParser.STR_ANGLE_LEFT, 0); }
		public ITerminalNode STR_NAME_REF() { return GetToken(AutoStepInteractionsParser.STR_NAME_REF, 0); }
		public ITerminalNode STR_ANGLE_RIGHT() { return GetToken(AutoStepInteractionsParser.STR_ANGLE_RIGHT, 0); }
		public MethodStrVariableContext(MethodStrPartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterMethodStrVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitMethodStrVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodStrVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodStrPartContext methodStrPart() {
		MethodStrPartContext _localctx = new MethodStrPartContext(Context, State);
		EnterRule(_localctx, 34, RULE_methodStrPart);
		try {
			State = 195;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STR_CONTENT:
				_localctx = new MethodStrContentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 190; Match(STR_CONTENT);
				}
				break;
			case METHOD_STR_ESCAPE_QUOTE:
				_localctx = new MethodStrEscapeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 191; Match(METHOD_STR_ESCAPE_QUOTE);
				}
				break;
			case STR_ANGLE_LEFT:
				_localctx = new MethodStrVariableContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 192; Match(STR_ANGLE_LEFT);
				State = 193; Match(STR_NAME_REF);
				State = 194; Match(STR_ANGLE_RIGHT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ComponentDefinitionContext : ParserRuleContext {
		public ComponentDefinitionDeclarationContext componentDefinitionDeclaration() {
			return GetRuleContext<ComponentDefinitionDeclarationContext>(0);
		}
		public ComponentItemContext[] componentItem() {
			return GetRuleContexts<ComponentItemContext>();
		}
		public ComponentItemContext componentItem(int i) {
			return GetRuleContext<ComponentItemContext>(i);
		}
		public ComponentDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterComponentDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitComponentDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentDefinitionContext componentDefinition() {
		ComponentDefinitionContext _localctx = new ComponentDefinitionContext(Context, State);
		EnterRule(_localctx, 36, RULE_componentDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; componentDefinitionDeclaration();
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRAITS_KEYWORD) | (1L << NAME_KEYWORD) | (1L << INHERITS_KEYWORD) | (1L << STEP_DEFINE) | (1L << NAME_REF))) != 0)) {
				{
				{
				State = 198; componentItem();
				}
				}
				State = 203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ComponentDefinitionDeclarationContext : ParserRuleContext {
		public ITerminalNode COMPONENT_DEFINITION() { return GetToken(AutoStepInteractionsParser.COMPONENT_DEFINITION, 0); }
		public ITerminalNode NAME_REF() { return GetToken(AutoStepInteractionsParser.NAME_REF, 0); }
		public ComponentDefinitionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentDefinitionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterComponentDefinitionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitComponentDefinitionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentDefinitionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentDefinitionDeclarationContext componentDefinitionDeclaration() {
		ComponentDefinitionDeclarationContext _localctx = new ComponentDefinitionDeclarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_componentDefinitionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204; Match(COMPONENT_DEFINITION);
			State = 205; Match(NAME_REF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ComponentItemContext : ParserRuleContext {
		public ComponentItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentItem; } }
	 
		public ComponentItemContext() { }
		public virtual void CopyFrom(ComponentItemContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class ComponentInheritsContext : ComponentItemContext {
		public ITerminalNode INHERITS_KEYWORD() { return GetToken(AutoStepInteractionsParser.INHERITS_KEYWORD, 0); }
		public ITerminalNode NAME_REF() { return GetToken(AutoStepInteractionsParser.NAME_REF, 0); }
		public ComponentInheritsContext(ComponentItemContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterComponentInherits(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitComponentInherits(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentInherits(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class ComponentMethodContext : ComponentItemContext {
		public MethodDefinitionContext methodDefinition() {
			return GetRuleContext<MethodDefinitionContext>(0);
		}
		public ComponentMethodContext(ComponentItemContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterComponentMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitComponentMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class ComponentNameContext : ComponentItemContext {
		public ITerminalNode NAME_KEYWORD() { return GetToken(AutoStepInteractionsParser.NAME_KEYWORD, 0); }
		public ITerminalNode STRING() { return GetToken(AutoStepInteractionsParser.STRING, 0); }
		public ComponentNameContext(ComponentItemContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterComponentName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitComponentName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentName(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class ComponentStepContext : ComponentItemContext {
		public StepDefinitionBodyContext stepDefinitionBody() {
			return GetRuleContext<StepDefinitionBodyContext>(0);
		}
		public ComponentStepContext(ComponentItemContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterComponentStep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitComponentStep(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentStep(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class ComponentTraitsContext : ComponentItemContext {
		public ITerminalNode TRAITS_KEYWORD() { return GetToken(AutoStepInteractionsParser.TRAITS_KEYWORD, 0); }
		public ITerminalNode[] NAME_REF() { return GetTokens(AutoStepInteractionsParser.NAME_REF); }
		public ITerminalNode NAME_REF(int i) {
			return GetToken(AutoStepInteractionsParser.NAME_REF, i);
		}
		public ITerminalNode[] LIST_SEPARATOR() { return GetTokens(AutoStepInteractionsParser.LIST_SEPARATOR); }
		public ITerminalNode LIST_SEPARATOR(int i) {
			return GetToken(AutoStepInteractionsParser.LIST_SEPARATOR, i);
		}
		public ComponentTraitsContext(ComponentItemContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterComponentTraits(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitComponentTraits(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentTraits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentItemContext componentItem() {
		ComponentItemContext _localctx = new ComponentItemContext(Context, State);
		EnterRule(_localctx, 40, RULE_componentItem);
		int _la;
		try {
			State = 222;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME_KEYWORD:
				_localctx = new ComponentNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 207; Match(NAME_KEYWORD);
				State = 208; Match(STRING);
				}
				break;
			case INHERITS_KEYWORD:
				_localctx = new ComponentInheritsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 209; Match(INHERITS_KEYWORD);
				State = 210; Match(NAME_REF);
				}
				break;
			case TRAITS_KEYWORD:
				_localctx = new ComponentTraitsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 211; Match(TRAITS_KEYWORD);
				State = 212; Match(NAME_REF);
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LIST_SEPARATOR) {
					{
					{
					State = 213; Match(LIST_SEPARATOR);
					State = 214; Match(NAME_REF);
					}
					}
					State = 219;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case NAME_REF:
				_localctx = new ComponentMethodContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 220; methodDefinition();
				}
				break;
			case STEP_DEFINE:
				_localctx = new ComponentStepContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 221; stepDefinitionBody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDefinitionBodyContext : ParserRuleContext {
		public StepDefinitionContext stepDefinition() {
			return GetRuleContext<StepDefinitionContext>(0);
		}
		public MethodCallContext[] methodCall() {
			return GetRuleContexts<MethodCallContext>();
		}
		public MethodCallContext methodCall(int i) {
			return GetRuleContext<MethodCallContext>(i);
		}
		public ITerminalNode[] FUNC_PASS_MARKER() { return GetTokens(AutoStepInteractionsParser.FUNC_PASS_MARKER); }
		public ITerminalNode FUNC_PASS_MARKER(int i) {
			return GetToken(AutoStepInteractionsParser.FUNC_PASS_MARKER, i);
		}
		public StepDefinitionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDefinitionBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterStepDefinitionBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitStepDefinitionBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepDefinitionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDefinitionBodyContext stepDefinitionBody() {
		StepDefinitionBodyContext _localctx = new StepDefinitionBodyContext(Context, State);
		EnterRule(_localctx, 42, RULE_stepDefinitionBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224; stepDefinition();
			State = 225; methodCall();
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FUNC_PASS_MARKER) {
				{
				{
				State = 226; Match(FUNC_PASS_MARKER);
				State = 227; methodCall();
				}
				}
				State = 232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDefinitionContext : ParserRuleContext {
		public ITerminalNode STEP_DEFINE() { return GetToken(AutoStepInteractionsParser.STEP_DEFINE, 0); }
		public StepDeclarationContext stepDeclaration() {
			return GetRuleContext<StepDeclarationContext>(0);
		}
		public ITerminalNode DEF_NEWLINE() { return GetToken(AutoStepInteractionsParser.DEF_NEWLINE, 0); }
		public ITerminalNode DEF_WS() { return GetToken(AutoStepInteractionsParser.DEF_WS, 0); }
		public StepDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterStepDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitStepDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDefinitionContext stepDefinition() {
		StepDefinitionContext _localctx = new StepDefinitionContext(Context, State);
		EnterRule(_localctx, 44, RULE_stepDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233; Match(STEP_DEFINE);
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEF_WS) {
				{
				State = 234; Match(DEF_WS);
				}
			}

			State = 237; stepDeclaration();
			State = 238; Match(DEF_NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDeclarationContext : ParserRuleContext {
		public StepDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDeclaration; } }
	 
		public StepDeclarationContext() { }
		public virtual void CopyFrom(StepDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class DeclareGivenContext : StepDeclarationContext {
		public ITerminalNode DEF_GIVEN() { return GetToken(AutoStepInteractionsParser.DEF_GIVEN, 0); }
		public StepDeclarationBodyContext stepDeclarationBody() {
			return GetRuleContext<StepDeclarationBodyContext>(0);
		}
		public ITerminalNode DEF_WS() { return GetToken(AutoStepInteractionsParser.DEF_WS, 0); }
		public DeclareGivenContext(StepDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterDeclareGiven(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitDeclareGiven(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareGiven(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class DeclareWhenContext : StepDeclarationContext {
		public ITerminalNode DEF_WHEN() { return GetToken(AutoStepInteractionsParser.DEF_WHEN, 0); }
		public StepDeclarationBodyContext stepDeclarationBody() {
			return GetRuleContext<StepDeclarationBodyContext>(0);
		}
		public ITerminalNode DEF_WS() { return GetToken(AutoStepInteractionsParser.DEF_WS, 0); }
		public DeclareWhenContext(StepDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterDeclareWhen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitDeclareWhen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareWhen(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class DeclareThenContext : StepDeclarationContext {
		public ITerminalNode DEF_THEN() { return GetToken(AutoStepInteractionsParser.DEF_THEN, 0); }
		public StepDeclarationBodyContext stepDeclarationBody() {
			return GetRuleContext<StepDeclarationBodyContext>(0);
		}
		public ITerminalNode DEF_WS() { return GetToken(AutoStepInteractionsParser.DEF_WS, 0); }
		public DeclareThenContext(StepDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterDeclareThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitDeclareThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareThen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDeclarationContext stepDeclaration() {
		StepDeclarationContext _localctx = new StepDeclarationContext(Context, State);
		EnterRule(_localctx, 46, RULE_stepDeclaration);
		try {
			State = 255;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEF_GIVEN:
				_localctx = new DeclareGivenContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 240; Match(DEF_GIVEN);
				State = 242;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 241; Match(DEF_WS);
					}
					break;
				}
				State = 244; stepDeclarationBody();
				}
				break;
			case DEF_WHEN:
				_localctx = new DeclareWhenContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 245; Match(DEF_WHEN);
				State = 247;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 246; Match(DEF_WS);
					}
					break;
				}
				State = 249; stepDeclarationBody();
				}
				break;
			case DEF_THEN:
				_localctx = new DeclareThenContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 250; Match(DEF_THEN);
				State = 252;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
				case 1:
					{
					State = 251; Match(DEF_WS);
					}
					break;
				}
				State = 254; stepDeclarationBody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDeclarationBodyContext : ParserRuleContext {
		public StepDeclarationSectionContext[] stepDeclarationSection() {
			return GetRuleContexts<StepDeclarationSectionContext>();
		}
		public StepDeclarationSectionContext stepDeclarationSection(int i) {
			return GetRuleContext<StepDeclarationSectionContext>(i);
		}
		public StepDeclarationBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDeclarationBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterStepDeclarationBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitStepDeclarationBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepDeclarationBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDeclarationBodyContext stepDeclarationBody() {
		StepDeclarationBodyContext _localctx = new StepDeclarationBodyContext(Context, State);
		EnterRule(_localctx, 48, RULE_stepDeclarationBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 257; stepDeclarationSection();
				}
				}
				State = 260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEF_GIVEN) | (1L << DEF_WHEN) | (1L << DEF_THEN) | (1L << DEF_ESCAPED_LCURLY) | (1L << DEF_ESCAPED_RCURLY) | (1L << DEF_LCURLY) | (1L << DEF_WS) | (1L << DEF_COLON) | (1L << DEF_COMPONENT_INSERT) | (1L << DEF_WORD))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDeclarationSectionContext : ParserRuleContext {
		public StepDeclarationSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDeclarationSection; } }
	 
		public StepDeclarationSectionContext() { }
		public virtual void CopyFrom(StepDeclarationSectionContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class DeclarationSectionContext : StepDeclarationSectionContext {
		public StepDeclarationSectionContentContext stepDeclarationSectionContent() {
			return GetRuleContext<StepDeclarationSectionContentContext>(0);
		}
		public DeclarationSectionContext(StepDeclarationSectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterDeclarationSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitDeclarationSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationSection(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class DeclarationArgumentContext : StepDeclarationSectionContext {
		public ITerminalNode DEF_LCURLY() { return GetToken(AutoStepInteractionsParser.DEF_LCURLY, 0); }
		public StepDeclarationArgumentContext stepDeclarationArgument() {
			return GetRuleContext<StepDeclarationArgumentContext>(0);
		}
		public ITerminalNode DEF_RCURLY() { return GetToken(AutoStepInteractionsParser.DEF_RCURLY, 0); }
		public DeclarationArgumentContext(StepDeclarationSectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterDeclarationArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitDeclarationArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDeclarationSectionContext stepDeclarationSection() {
		StepDeclarationSectionContext _localctx = new StepDeclarationSectionContext(Context, State);
		EnterRule(_localctx, 50, RULE_stepDeclarationSection);
		try {
			State = 267;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEF_LCURLY:
				_localctx = new DeclarationArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 262; Match(DEF_LCURLY);
				State = 263; stepDeclarationArgument();
				State = 264; Match(DEF_RCURLY);
				}
				break;
			case DEF_GIVEN:
			case DEF_WHEN:
			case DEF_THEN:
			case DEF_ESCAPED_LCURLY:
			case DEF_ESCAPED_RCURLY:
			case DEF_WS:
			case DEF_COLON:
			case DEF_COMPONENT_INSERT:
			case DEF_WORD:
				_localctx = new DeclarationSectionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 266; stepDeclarationSectionContent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDeclarationArgumentContext : ParserRuleContext {
		public StepDeclarationArgumentNameContext stepDeclarationArgumentName() {
			return GetRuleContext<StepDeclarationArgumentNameContext>(0);
		}
		public ITerminalNode DEF_COLON() { return GetToken(AutoStepInteractionsParser.DEF_COLON, 0); }
		public StepDeclarationTypeHintContext stepDeclarationTypeHint() {
			return GetRuleContext<StepDeclarationTypeHintContext>(0);
		}
		public StepDeclarationArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDeclarationArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterStepDeclarationArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitStepDeclarationArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepDeclarationArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDeclarationArgumentContext stepDeclarationArgument() {
		StepDeclarationArgumentContext _localctx = new StepDeclarationArgumentContext(Context, State);
		EnterRule(_localctx, 52, RULE_stepDeclarationArgument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269; stepDeclarationArgumentName();
			State = 272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEF_COLON) {
				{
				State = 270; Match(DEF_COLON);
				State = 271; stepDeclarationTypeHint();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDeclarationArgumentNameContext : ParserRuleContext {
		public ITerminalNode DEF_WORD() { return GetToken(AutoStepInteractionsParser.DEF_WORD, 0); }
		public StepDeclarationArgumentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDeclarationArgumentName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterStepDeclarationArgumentName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitStepDeclarationArgumentName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepDeclarationArgumentName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDeclarationArgumentNameContext stepDeclarationArgumentName() {
		StepDeclarationArgumentNameContext _localctx = new StepDeclarationArgumentNameContext(Context, State);
		EnterRule(_localctx, 54, RULE_stepDeclarationArgumentName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274; Match(DEF_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDeclarationTypeHintContext : ParserRuleContext {
		public ITerminalNode DEF_WORD() { return GetToken(AutoStepInteractionsParser.DEF_WORD, 0); }
		public StepDeclarationTypeHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDeclarationTypeHint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterStepDeclarationTypeHint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitStepDeclarationTypeHint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepDeclarationTypeHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDeclarationTypeHintContext stepDeclarationTypeHint() {
		StepDeclarationTypeHintContext _localctx = new StepDeclarationTypeHintContext(Context, State);
		EnterRule(_localctx, 56, RULE_stepDeclarationTypeHint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276; Match(DEF_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDeclarationSectionContentContext : ParserRuleContext {
		public StepDeclarationSectionContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDeclarationSectionContent; } }
	 
		public StepDeclarationSectionContentContext() { }
		public virtual void CopyFrom(StepDeclarationSectionContentContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class DeclarationWordContext : StepDeclarationSectionContentContext {
		public ITerminalNode DEF_WORD() { return GetToken(AutoStepInteractionsParser.DEF_WORD, 0); }
		public ITerminalNode DEF_GIVEN() { return GetToken(AutoStepInteractionsParser.DEF_GIVEN, 0); }
		public ITerminalNode DEF_WHEN() { return GetToken(AutoStepInteractionsParser.DEF_WHEN, 0); }
		public ITerminalNode DEF_THEN() { return GetToken(AutoStepInteractionsParser.DEF_THEN, 0); }
		public DeclarationWordContext(StepDeclarationSectionContentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterDeclarationWord(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitDeclarationWord(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationWord(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class DeclarationComponentInsertContext : StepDeclarationSectionContentContext {
		public ITerminalNode DEF_COMPONENT_INSERT() { return GetToken(AutoStepInteractionsParser.DEF_COMPONENT_INSERT, 0); }
		public DeclarationComponentInsertContext(StepDeclarationSectionContentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterDeclarationComponentInsert(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitDeclarationComponentInsert(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationComponentInsert(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class DeclarationWsContext : StepDeclarationSectionContentContext {
		public ITerminalNode DEF_WS() { return GetToken(AutoStepInteractionsParser.DEF_WS, 0); }
		public DeclarationWsContext(StepDeclarationSectionContentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterDeclarationWs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitDeclarationWs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationWs(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class DeclarationColonContext : StepDeclarationSectionContentContext {
		public ITerminalNode DEF_COLON() { return GetToken(AutoStepInteractionsParser.DEF_COLON, 0); }
		public DeclarationColonContext(StepDeclarationSectionContentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterDeclarationColon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitDeclarationColon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationColon(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class DeclarationEscapedContext : StepDeclarationSectionContentContext {
		public ITerminalNode DEF_ESCAPED_LCURLY() { return GetToken(AutoStepInteractionsParser.DEF_ESCAPED_LCURLY, 0); }
		public ITerminalNode DEF_ESCAPED_RCURLY() { return GetToken(AutoStepInteractionsParser.DEF_ESCAPED_RCURLY, 0); }
		public DeclarationEscapedContext(StepDeclarationSectionContentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterDeclarationEscaped(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitDeclarationEscaped(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationEscaped(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDeclarationSectionContentContext stepDeclarationSectionContent() {
		StepDeclarationSectionContentContext _localctx = new StepDeclarationSectionContentContext(Context, State);
		EnterRule(_localctx, 58, RULE_stepDeclarationSectionContent);
		int _la;
		try {
			State = 283;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEF_GIVEN:
			case DEF_WHEN:
			case DEF_THEN:
			case DEF_WORD:
				_localctx = new DeclarationWordContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 278;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEF_GIVEN) | (1L << DEF_WHEN) | (1L << DEF_THEN) | (1L << DEF_WORD))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case DEF_COMPONENT_INSERT:
				_localctx = new DeclarationComponentInsertContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 279; Match(DEF_COMPONENT_INSERT);
				}
				break;
			case DEF_ESCAPED_LCURLY:
			case DEF_ESCAPED_RCURLY:
				_localctx = new DeclarationEscapedContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 280;
				_la = TokenStream.LA(1);
				if ( !(_la==DEF_ESCAPED_LCURLY || _la==DEF_ESCAPED_RCURLY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case DEF_WS:
				_localctx = new DeclarationWsContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 281; Match(DEF_WS);
				}
				break;
			case DEF_COLON:
				_localctx = new DeclarationColonContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 282; Match(DEF_COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x36', '\x120', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x3', 
		'\x2', '\a', '\x2', '@', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x43', 
		'\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', 'J', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\a', '\x4', 'O', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 'R', 
		'\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\a', '\x5', 'Z', '\n', '\x5', '\f', '\x5', '\xE', 
		'\x5', ']', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x61', 
		'\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x65', '\n', '\x6', 
		'\f', '\x6', '\xE', '\x6', 'h', '\v', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 'p', '\n', 
		'\b', '\f', '\b', '\xE', '\b', 's', '\v', '\b', '\x3', '\t', '\x3', '\t', 
		'\x5', '\t', 'w', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x5', '\n', '}', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x5', '\v', '\x82', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\a', '\f', '\x89', '\n', '\f', '\f', '\f', 
		'\xE', '\f', '\x8C', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\a', '\r', '\x91', '\n', '\r', '\f', '\r', '\xE', '\r', '\x94', '\v', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x99', 
		'\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\a', '\xF', '\xA0', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xA3', 
		'\v', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xB6', '\n', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x12', '\x6', '\x12', '\xBD', '\n', '\x12', '\r', '\x12', '\xE', '\x12', 
		'\xBE', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x5', '\x13', '\xC6', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\a', '\x14', '\xCA', '\n', '\x14', '\f', '\x14', '\xE', '\x14', '\xCD', 
		'\v', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\xDA', '\n', '\x16', '\f', 
		'\x16', '\xE', '\x16', '\xDD', '\v', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x5', '\x16', '\xE1', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\a', '\x17', '\xE7', '\n', '\x17', '\f', '\x17', 
		'\xE', '\x17', '\xEA', '\v', '\x17', '\x3', '\x18', '\x3', '\x18', '\x5', 
		'\x18', '\xEE', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\xF5', '\n', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\xFA', '\n', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\xFF', '\n', 
		'\x19', '\x3', '\x19', '\x5', '\x19', '\x102', '\n', '\x19', '\x3', '\x1A', 
		'\x6', '\x1A', '\x105', '\n', '\x1A', '\r', '\x1A', '\xE', '\x1A', '\x106', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x5', '\x1B', '\x10E', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x5', '\x1C', '\x113', '\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x11E', '\n', '\x1F', '\x3', 
		'\x1F', '\x2', '\x2', ' ', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', 
		':', '<', '\x2', '\x4', '\x4', '\x2', ')', '+', '\x34', '\x34', '\x3', 
		'\x2', ',', '-', '\x2', '\x12F', '\x2', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x4', 'I', '\x3', '\x2', '\x2', '\x2', '\x6', 'K', '\x3', '\x2', '\x2', 
		'\x2', '\b', '`', '\x3', '\x2', '\x2', '\x2', '\n', '\x62', '\x3', '\x2', 
		'\x2', '\x2', '\f', 'i', '\x3', '\x2', '\x2', '\x2', '\xE', 'l', '\x3', 
		'\x2', '\x2', '\x2', '\x10', 'v', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'x', '\x3', '\x2', '\x2', '\x2', '\x14', '~', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x85', '\x3', '\x2', '\x2', '\x2', '\x18', '\x8D', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x95', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x9C', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\xB5', '\x3', '\x2', '\x2', '\x2', 
		' ', '\xB7', '\x3', '\x2', '\x2', '\x2', '\"', '\xBC', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xC5', '\x3', '\x2', '\x2', '\x2', '&', '\xC7', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xCE', '\x3', '\x2', '\x2', '\x2', '*', '\xE0', '\x3', 
		'\x2', '\x2', '\x2', ',', '\xE2', '\x3', '\x2', '\x2', '\x2', '.', '\xEB', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x101', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x104', '\x3', '\x2', '\x2', '\x2', '\x34', '\x10D', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x38', '\x114', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x116', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x11D', '\x3', '\x2', '\x2', '\x2', '>', '@', '\x5', '\x4', '\x3', 
		'\x2', '?', '>', '\x3', '\x2', '\x2', '\x2', '@', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\a', '\x2', 
		'\x2', '\x3', '\x45', '\x3', '\x3', '\x2', '\x2', '\x2', '\x46', 'J', 
		'\x5', '\n', '\x6', '\x2', 'G', 'J', '\x5', '&', '\x14', '\x2', 'H', 'J', 
		'\x5', '\x6', '\x4', '\x2', 'I', '\x46', '\x3', '\x2', '\x2', '\x2', 'I', 
		'G', '\x3', '\x2', '\x2', '\x2', 'I', 'H', '\x3', '\x2', '\x2', '\x2', 
		'J', '\x5', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\a', '\x3', '\x2', 
		'\x2', 'L', 'P', '\a', '\xF', '\x2', '\x2', 'M', 'O', '\x5', '\b', '\x5', 
		'\x2', 'N', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x3', '\x2', '\x2', 
		'\x2', 'Q', '\a', '\x3', '\x2', '\x2', '\x2', 'R', 'P', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'T', '\a', '\a', '\x2', '\x2', 'T', '\x61', '\a', '\x12', 
		'\x2', '\x2', 'U', 'V', '\a', '\t', '\x2', '\x2', 'V', '[', '\a', '\xF', 
		'\x2', '\x2', 'W', 'X', '\a', '\v', '\x2', '\x2', 'X', 'Z', '\a', '\xF', 
		'\x2', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Z', ']', '\x3', '\x2', 
		'\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\x3', 
		'\x2', '\x2', '\x2', '\\', '\x61', '\x3', '\x2', '\x2', '\x2', ']', '[', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x61', '\x5', '\x12', '\n', '\x2', '_', 
		'\x61', '\x5', ',', '\x17', '\x2', '`', 'S', '\x3', '\x2', '\x2', '\x2', 
		'`', 'U', '\x3', '\x2', '\x2', '\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', 
		'`', '_', '\x3', '\x2', '\x2', '\x2', '\x61', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\x66', '\x5', '\f', '\a', '\x2', '\x63', '\x65', '\x5', 
		'\x10', '\t', '\x2', '\x64', '\x63', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'h', '\x3', '\x2', '\x2', '\x2', '\x66', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x66', 'g', '\x3', '\x2', '\x2', '\x2', 'g', '\v', '\x3', '\x2', 
		'\x2', '\x2', 'h', '\x66', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\a', 
		'\x4', '\x2', '\x2', 'j', 'k', '\x5', '\xE', '\b', '\x2', 'k', '\r', '\x3', 
		'\x2', '\x2', '\x2', 'l', 'q', '\a', '\xF', '\x2', '\x2', 'm', 'n', '\a', 
		'\x10', '\x2', '\x2', 'n', 'p', '\a', '\xF', '\x2', '\x2', 'o', 'm', '\x3', 
		'\x2', '\x2', '\x2', 'p', 's', '\x3', '\x2', '\x2', '\x2', 'q', 'o', '\x3', 
		'\x2', '\x2', '\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 'r', '\xF', 
		'\x3', '\x2', '\x2', '\x2', 's', 'q', '\x3', '\x2', '\x2', '\x2', 't', 
		'w', '\x5', '\x12', '\n', '\x2', 'u', 'w', '\x5', ',', '\x17', '\x2', 
		'v', 't', '\x3', '\x2', '\x2', '\x2', 'v', 'u', '\x3', '\x2', '\x2', '\x2', 
		'w', '\x11', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x5', '\x14', '\v', 
		'\x2', 'y', '|', '\a', '\f', '\x2', '\x2', 'z', '}', '\a', '\r', '\x2', 
		'\x2', '{', '}', '\x5', '\x18', '\r', '\x2', '|', 'z', '\x3', '\x2', '\x2', 
		'\x2', '|', '{', '\x3', '\x2', '\x2', '\x2', '}', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x7F', '\a', '\xF', '\x2', '\x2', '\x7F', '\x81', 
		'\a', '\xE', '\x2', '\x2', '\x80', '\x82', '\x5', '\x16', '\f', '\x2', 
		'\x81', '\x80', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x83', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', 
		'\a', ' ', '\x2', '\x2', '\x84', '\x15', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x8A', '\a', '\x1A', '\x2', '\x2', '\x86', '\x87', '\a', '\x1D', '\x2', 
		'\x2', '\x87', '\x89', '\a', '\x1A', '\x2', '\x2', '\x88', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x89', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x17', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x92', '\x5', '\x1A', '\xE', '\x2', '\x8E', 
		'\x8F', '\a', '\x11', '\x2', '\x2', '\x8F', '\x91', '\x5', '\x1A', '\xE', 
		'\x2', '\x90', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x91', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x92', '\x90', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x93', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '\x92', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\a', 
		'\xF', '\x2', '\x2', '\x96', '\x98', '\a', '\xE', '\x2', '\x2', '\x97', 
		'\x99', '\x5', '\x1C', '\xF', '\x2', '\x98', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\x98', '\x99', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\x9B', '\a', ' ', '\x2', '\x2', '\x9B', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x9C', '\xA1', '\x5', '\x1E', '\x10', 
		'\x2', '\x9D', '\x9E', '\a', '\x1D', '\x2', '\x2', '\x9E', '\xA0', '\x5', 
		'\x1E', '\x10', '\x2', '\x9F', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\xA1', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\xA5', '\a', '\x18', '\x2', '\x2', '\xA5', '\xA6', '\x5', '\"', '\x12', 
		'\x2', '\xA6', '\xA7', '\a', '$', '\x2', '\x2', '\xA7', '\xB6', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\xB6', '\a', '\x1A', '\x2', '\x2', '\xA9', 
		'\xAA', '\a', '\x1A', '\x2', '\x2', '\xAA', '\xAB', '\a', '\x1B', '\x2', 
		'\x2', '\xAB', '\xAC', '\a', '\x1A', '\x2', '\x2', '\xAC', '\xB6', '\a', 
		'\x1C', '\x2', '\x2', '\xAD', '\xAE', '\a', '\x1A', '\x2', '\x2', '\xAE', 
		'\xAF', '\a', '\x1B', '\x2', '\x2', '\xAF', '\xB0', '\x5', ' ', '\x11', 
		'\x2', '\xB0', '\xB1', '\a', '\x1C', '\x2', '\x2', '\xB1', '\xB6', '\x3', 
		'\x2', '\x2', '\x2', '\xB2', '\xB6', '\a', '\x19', '\x2', '\x2', '\xB3', 
		'\xB6', '\a', '\x1F', '\x2', '\x2', '\xB4', '\xB6', '\a', '\x1E', '\x2', 
		'\x2', '\xB5', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xA8', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB4', '\x3', 
		'\x2', '\x2', '\x2', '\xB6', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xB8', '\a', '\x18', '\x2', '\x2', '\xB8', '\xB9', '\x5', '\"', '\x12', 
		'\x2', '\xB9', '\xBA', '\a', '$', '\x2', '\x2', '\xBA', '!', '\x3', '\x2', 
		'\x2', '\x2', '\xBB', '\xBD', '\x5', '$', '\x13', '\x2', '\xBC', '\xBB', 
		'\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\x3', '\x2', 
		'\x2', '\x2', '\xBF', '#', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC6', 
		'\a', '&', '\x2', '\x2', '\xC1', '\xC6', '\a', '#', '\x2', '\x2', '\xC2', 
		'\xC3', '\a', '\"', '\x2', '\x2', '\xC3', '\xC4', '\a', '\'', '\x2', '\x2', 
		'\xC4', '\xC6', '\a', '(', '\x2', '\x2', '\xC5', '\xC0', '\x3', '\x2', 
		'\x2', '\x2', '\xC5', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC2', 
		'\x3', '\x2', '\x2', '\x2', '\xC6', '%', '\x3', '\x2', '\x2', '\x2', '\xC7', 
		'\xCB', '\x5', '(', '\x15', '\x2', '\xC8', '\xCA', '\x5', '*', '\x16', 
		'\x2', '\xC9', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCD', '\x3', 
		'\x2', '\x2', '\x2', '\xCB', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xCB', 
		'\xCC', '\x3', '\x2', '\x2', '\x2', '\xCC', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\xCD', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\a', 
		'\x5', '\x2', '\x2', '\xCF', '\xD0', '\a', '\xF', '\x2', '\x2', '\xD0', 
		')', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\a', '\a', '\x2', '\x2', 
		'\xD2', '\xE1', '\a', '\x12', '\x2', '\x2', '\xD3', '\xD4', '\a', '\b', 
		'\x2', '\x2', '\xD4', '\xE1', '\a', '\xF', '\x2', '\x2', '\xD5', '\xD6', 
		'\a', '\x6', '\x2', '\x2', '\xD6', '\xDB', '\a', '\xF', '\x2', '\x2', 
		'\xD7', '\xD8', '\a', '\v', '\x2', '\x2', '\xD8', '\xDA', '\a', '\xF', 
		'\x2', '\x2', '\xD9', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDD', 
		'\x3', '\x2', '\x2', '\x2', '\xDB', '\xD9', '\x3', '\x2', '\x2', '\x2', 
		'\xDB', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xE1', '\x3', '\x2', 
		'\x2', '\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE1', 
		'\x5', '\x12', '\n', '\x2', '\xDF', '\xE1', '\x5', ',', '\x17', '\x2', 
		'\xE0', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xD3', '\x3', '\x2', 
		'\x2', '\x2', '\xE0', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xDE', 
		'\x3', '\x2', '\x2', '\x2', '\xE0', '\xDF', '\x3', '\x2', '\x2', '\x2', 
		'\xE1', '+', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\x5', '.', '\x18', 
		'\x2', '\xE3', '\xE8', '\x5', '\x1A', '\xE', '\x2', '\xE4', '\xE5', '\a', 
		'\x11', '\x2', '\x2', '\xE5', '\xE7', '\x5', '\x1A', '\xE', '\x2', '\xE6', 
		'\xE4', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xEA', '\x3', '\x2', '\x2', 
		'\x2', '\xE8', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', '\x3', 
		'\x2', '\x2', '\x2', '\xE9', '-', '\x3', '\x2', '\x2', '\x2', '\xEA', 
		'\xE8', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xED', '\a', '\n', '\x2', 
		'\x2', '\xEC', '\xEE', '\a', '\x31', '\x2', '\x2', '\xED', '\xEC', '\x3', 
		'\x2', '\x2', '\x2', '\xED', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xEE', 
		'\xEF', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', '\x5', '\x30', '\x19', 
		'\x2', '\xF0', '\xF1', '\a', '\x30', '\x2', '\x2', '\xF1', '/', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '\xF4', '\a', ')', '\x2', '\x2', '\xF3', 
		'\xF5', '\a', '\x31', '\x2', '\x2', '\xF4', '\xF3', '\x3', '\x2', '\x2', 
		'\x2', '\xF4', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\x3', 
		'\x2', '\x2', '\x2', '\xF6', '\x102', '\x5', '\x32', '\x1A', '\x2', '\xF7', 
		'\xF9', '\a', '*', '\x2', '\x2', '\xF8', '\xFA', '\a', '\x31', '\x2', 
		'\x2', '\xF9', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\xFA', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFB', 
		'\x102', '\x5', '\x32', '\x1A', '\x2', '\xFC', '\xFE', '\a', '+', '\x2', 
		'\x2', '\xFD', '\xFF', '\a', '\x31', '\x2', '\x2', '\xFE', '\xFD', '\x3', 
		'\x2', '\x2', '\x2', '\xFE', '\xFF', '\x3', '\x2', '\x2', '\x2', '\xFF', 
		'\x100', '\x3', '\x2', '\x2', '\x2', '\x100', '\x102', '\x5', '\x32', 
		'\x1A', '\x2', '\x101', '\xF2', '\x3', '\x2', '\x2', '\x2', '\x101', '\xF7', 
		'\x3', '\x2', '\x2', '\x2', '\x101', '\xFC', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x31', '\x3', '\x2', '\x2', '\x2', '\x103', '\x105', '\x5', 
		'\x34', '\x1B', '\x2', '\x104', '\x103', '\x3', '\x2', '\x2', '\x2', '\x105', 
		'\x106', '\x3', '\x2', '\x2', '\x2', '\x106', '\x104', '\x3', '\x2', '\x2', 
		'\x2', '\x106', '\x107', '\x3', '\x2', '\x2', '\x2', '\x107', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x108', '\x109', '\a', '.', '\x2', '\x2', 
		'\x109', '\x10A', '\x5', '\x36', '\x1C', '\x2', '\x10A', '\x10B', '\a', 
		'/', '\x2', '\x2', '\x10B', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x10C', 
		'\x10E', '\x5', '<', '\x1F', '\x2', '\x10D', '\x108', '\x3', '\x2', '\x2', 
		'\x2', '\x10D', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x10F', '\x112', '\x5', '\x38', '\x1D', '\x2', 
		'\x110', '\x111', '\a', '\x32', '\x2', '\x2', '\x111', '\x113', '\x5', 
		':', '\x1E', '\x2', '\x112', '\x110', '\x3', '\x2', '\x2', '\x2', '\x112', 
		'\x113', '\x3', '\x2', '\x2', '\x2', '\x113', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x114', '\x115', '\a', '\x34', '\x2', '\x2', '\x115', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x116', '\x117', '\a', '\x34', '\x2', '\x2', 
		'\x117', ';', '\x3', '\x2', '\x2', '\x2', '\x118', '\x11E', '\t', '\x2', 
		'\x2', '\x2', '\x119', '\x11E', '\a', '\x33', '\x2', '\x2', '\x11A', '\x11E', 
		'\t', '\x3', '\x2', '\x2', '\x11B', '\x11E', '\a', '\x31', '\x2', '\x2', 
		'\x11C', '\x11E', '\a', '\x32', '\x2', '\x2', '\x11D', '\x118', '\x3', 
		'\x2', '\x2', '\x2', '\x11D', '\x119', '\x3', '\x2', '\x2', '\x2', '\x11D', 
		'\x11A', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11B', '\x3', '\x2', '\x2', 
		'\x2', '\x11D', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11E', '=', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\x41', 'I', 'P', '[', '`', '\x66', 'q', 'v', 
		'|', '\x81', '\x8A', '\x92', '\x98', '\xA1', '\xB5', '\xBE', '\xC5', '\xCB', 
		'\xDB', '\xE0', '\xE8', '\xED', '\xF4', '\xF9', '\xFE', '\x101', '\x106', 
		'\x10D', '\x112', '\x11D',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AutoStep.Language.Interaction.Parser

