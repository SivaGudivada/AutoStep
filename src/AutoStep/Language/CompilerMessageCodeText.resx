<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AndMustFollowNormalStep" xml:space="preserve">
    <value>An 'And' statement must be preceded by a 'Given', 'When' or 'Then'.</value>
  </data>
  <data name="ArgumentHasNotBeenClosed" xml:space="preserve">
    <value>Quoted argument has not been closed.</value>
  </data>
  <data name="ArgumentTypeNotCompatible" xml:space="preserve">
    <value>Cannot use a value of type {0} for an argument declared as a {1}.</value>
  </data>
  <data name="CannotSpecifyDynamicValueInStepDefinition" xml:space="preserve">
    <value>You cannot use '{0}' as a Step Parameter. Step Parameter variables must be literal names, e.g. 'variable1' or 'total'. You cannot specify dynamic values.</value>
  </data>
  <data name="DuplicateScenarioNames" xml:space="preserve">
    <value>This scenario name, '{0}', has already been used in this feature. Scenario names must be unique within a feature.</value>
  </data>
  <data name="ExamplesBlockRequiresTable" xml:space="preserve">
    <value>Examples blocks must contain a table.</value>
  </data>
  <data name="ExampleVariableInScenario" xml:space="preserve">
    <value>You have specified an Example variable to insert, '{0}', but the step is in a Scenario; did you mean to use a Scenario Outline instead?</value>
  </data>
  <data name="ExampleVariableNotDeclared" xml:space="preserve">
    <value>You have specified an Example variable to insert, '{0}', but you have not declared the variable in any of your Examples. This value will always be blank when the test runs.</value>
  </data>
  <data name="InteractionComponentInheritanceLoop" xml:space="preserve">
    <value>Detected a circular component inheritance loop; loop path is {0}.</value>
  </data>
  <data name="InteractionComponentInheritedComponentNotFound" xml:space="preserve">
    <value>The specified component to inherit from, {0}, cannot be found. Does this component exist?</value>
  </data>
  <data name="InteractionComponentStepDefinitionCannotHaveComponentMarker" xml:space="preserve">
    <value>Interaction Step Definitions inside components cannot have $component$ markers; these are reserved for Trait steps.</value>
  </data>
  <data name="InteractionConstantNotDefined" xml:space="preserve">
    <value>The {0} constant is not defined.</value>
  </data>
  <data name="InteractionDuplicateMethodDefinition" xml:space="preserve">
    <value>Duplicate method definitions for '{0}' are not permitted. Method has already been defined in this block.</value>
  </data>
  <data name="InteractionDuplicateTrait" xml:space="preserve">
    <value>Duplicate trait specified.</value>
  </data>
  <data name="InteractionInvalidContent" xml:space="preserve">
    <value>Invalid character(s).</value>
  </data>
  <data name="InteractionMethodArgumentMismatch" xml:space="preserve">
    <value>The method being called requires {0} argument(s), but you are providing {1}.</value>
  </data>
  <data name="InteractionMethodCallMissingParameterSeparator" xml:space="preserve">
    <value>Method call appears to be missing a parameter separator, are you missing a comma?</value>
  </data>
  <data name="InteractionMethodCallMissingSeparator" xml:space="preserve">
    <value>Missing call separator '-&gt;'.</value>
  </data>
  <data name="InteractionMethodCallUnterminated" xml:space="preserve">
    <value>Method call has not been closed, expecting ')'.</value>
  </data>
  <data name="InteractionMethodCircularReference" xml:space="preserve">
    <value>An interaction method cannot call itself.</value>
  </data>
  <data name="InteractionMethodDeclMissingParameter" xml:space="preserve">
    <value>Method declaration expects another parameter; do you have an unintended extra comma in your declaration list?</value>
  </data>
  <data name="InteractionMethodDeclMissingParameterSeparator" xml:space="preserve">
    <value>Method declaration appears to be missing a parameter separator, are you missing a comma?</value>
  </data>
  <data name="InteractionMethodDeclUnexpectedContent" xml:space="preserve">
    <value>Method declaration contains unexpected content. Method declarations should consist of zero or more parameter names only, e.g. method(), method(param1), method(param1, param2).</value>
  </data>
  <data name="InteractionMethodDeclUnterminated" xml:space="preserve">
    <value>Method declaration has not been closed, expecting ')'.</value>
  </data>
  <data name="InteractionMethodFromTraitRequiredButNotDefined" xml:space="preserve">
    <value>Component is missing definition for required method '{0}', declared in {1}:{2}.</value>
  </data>
  <data name="InteractionMethodNeedsParentheses" xml:space="preserve">
    <value>Interaction methods require parentheses; e.g. myMethod(), or myMethod(arg1, arg2).</value>
  </data>
  <data name="InteractionMethodNotAvailable" xml:space="preserve">
    <value>The specified interaction method '{0}' is not available. It must be declared with an associated expression, e.g. '{0}: method()'.</value>
  </data>
  <data name="InteractionMethodNotAvailablePermitUndefined" xml:space="preserve">
    <value>The specified interaction method '{0}' is not available. It should be either be declared with an associated expression, or with 'needs-defining'. E.g. '{0}: method()' or '{0}: needs-defining'.</value>
  </data>
  <data name="InteractionMethodRequiredButNotDefined" xml:space="preserve">
    <value>Method needs to be defined; declared at {0}:L{1}.</value>
  </data>
  <data name="InteractionMissingExpectedName" xml:space="preserve">
    <value>A name is required.</value>
  </data>
  <data name="InteractionMissingStepDeclaration" xml:space="preserve">
    <value>Interaction Step Declaration is missing the declaration text.</value>
  </data>
  <data name="InteractionNameAlreadySet" xml:space="preserve">
    <value>A name has already been provided for this entity.</value>
  </data>
  <data name="InteractionTraitStepDefinitionMustHaveComponent" xml:space="preserve">
    <value>Interaction Step Definitions inside traits must contain at least one $component$ marker, so that the component can be identified.</value>
  </data>
  <data name="InteractionUnterminatedString" xml:space="preserve">
    <value>Unterminated string.</value>
  </data>
  <data name="InteractionVariableNotAnArray" xml:space="preserve">
    <value>The {0} variable is not a collection, so you cannot access it as one.</value>
  </data>
  <data name="InteractionVariableNotDefined" xml:space="preserve">
    <value>The {0} variable is not defined.</value>
  </data>
  <data name="InvalidExamplesKeyword" xml:space="preserve">
    <value>The 'Examples' keyword is case-sensitive, so '{0}' should be 'Examples:'</value>
  </data>
  <data name="InvalidFeatureKeyword" xml:space="preserve">
    <value>The 'Feature' keyword is case-sensitive, so '{0}' should be 'Feature:'</value>
  </data>
  <data name="InvalidScenarioKeyword" xml:space="preserve">
    <value>The 'Scenario' keyword is case-sensitive, so '{0}' should be 'Scenario:'</value>
  </data>
  <data name="InvalidScenarioOutlineKeyword" xml:space="preserve">
    <value>The 'Scenario Outline' phrase is case-sensitive, so '{0}' should be 'Scenario Outline:'</value>
  </data>
  <data name="InvalidStepDefineKeyword" xml:space="preserve">
    <value>A custom step cannot be defined using '{0}'. You must use Given, When or Then.</value>
  </data>
  <data name="IOException" xml:space="preserve">
    <value>File access error: {0}</value>
  </data>
  <data name="LinkerMultipleMatchingDefinitions" xml:space="preserve">
    <value>There are multiple matching step definitions that match this step.</value>
  </data>
  <data name="LinkerNoMatchingStepDefinition" xml:space="preserve">
    <value>No step definitions could be found that match this step.</value>
  </data>
  <data name="NoFeatureTitleProvided" xml:space="preserve">
    <value>Features must have a title.</value>
  </data>
  <data name="NoScenarioOutlineTitleProvided" xml:space="preserve">
    <value>Scenario Outlines must have a title.</value>
  </data>
  <data name="NoScenarios" xml:space="preserve">
    <value>Your Feature '{0}' has no Scenarios, so will not run any tests.</value>
  </data>
  <data name="NoScenarioTitleProvided" xml:space="preserve">
    <value>Scenarios must have a title.</value>
  </data>
  <data name="NotExpectingExample" xml:space="preserve">
    <value>Not expecting an Examples block here; did you mean to define '{0}' as a Scenario Outline rather than a Scenario?</value>
  </data>
  <data name="OnlyOneFeatureAllowed" xml:space="preserve">
    <value>You can only have one Feature per file. Create a new file for this Feature.</value>
  </data>
  <data name="OptionWithNoSetting" xml:space="preserve">
    <value>Provided Option '{0}' has a setting value marker ':', but no value has been provided.</value>
  </data>
  <data name="StepDefArgumentShouldNotHaveQuotes" xml:space="preserve">
    <value>A step definition argument should not be surrounded by quote marks (e.g. '{{argument}}'). It will not be possible to consistently match the argument in tests.</value>
  </data>
  <data name="StepNotExpected" xml:space="preserve">
    <value>A Step is not expected here.</value>
  </data>
  <data name="StepVariableInvalidWhitespace" xml:space="preserve">
    <value>Extraneous whitespace detected in Step Parameter variable name. You cannot have extra whitespace at the start or end of a Step Parameter variable name.</value>
  </data>
  <data name="StepVariableNameRequired" xml:space="preserve">
    <value>You cannot specify an Empty Parameter as a Step Parameter. Step Parameter variables must be literal names, e.g. {variable1} or {total}.</value>
  </data>
  <data name="StepVariableNotDeclared" xml:space="preserve">
    <value>You have specified a Step parameter variable to insert, '{0}', but you have not declared the variable in the step declaration. This value will always be blank when the test runs.</value>
  </data>
  <data name="SyntaxError" xml:space="preserve">
    <value>Syntax Error: {0}</value>
  </data>
  <data name="TableColumnsMismatch" xml:space="preserve">
    <value>The row contains {0} cell(s), but we are expecting {1}, because of the number of headers.</value>
  </data>
  <data name="TableNotRequired" xml:space="preserve">
    <value>The step definition does not require a table, so the provided one will not be used. Did you mean to use a different step?</value>
  </data>
  <data name="TableRequired" xml:space="preserve">
    <value>The step definition requires a table.</value>
  </data>
  <data name="TableRowHasNotBeenTerminated" xml:space="preserve">
    <value>Table cell has not been terminated. Expecting a table delimiter character '|'.</value>
  </data>
  <data name="TypeRequiresValueForArgument" xml:space="preserve">
    <value>The step definition requires a type of {0} for this argument, but no value has been provided.</value>
  </data>
  <data name="UncategorisedException" xml:space="preserve">
    <value>Internal Error: {0}</value>
  </data>
  <data name="UnexpectedAnnotation" xml:space="preserve">
    <value>Not expecting an annotation at this position.</value>
  </data>
  <data name="UnexpectedAnnotationMarker" xml:space="preserve">
    <value>Cannot use annotation markers ($, @) inside another annotation. Are you missing a newline?</value>
  </data>
  <data name="UnexpectedAnnotationWhiteSpace" xml:space="preserve">
    <value>Not expecting whitespace at this point. Annotations should have the format @tag, $option or $option:value.</value>
  </data>
  <data name="UnexpectedEndOfFile" xml:space="preserve">
    <value>Unexpected end of file.</value>
  </data>
</root>